// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :one
INSERT INTO "User" (email, name, password) VALUES ($1, $2, $3)
RETURNING id, name, email, password, created_at, updated_at
`

type AddUserParams struct {
	Email    string
	Name     string
	Password string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser, arg.Email, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO "Session" (sessionToken, refreshtoken, expires_at, user_id) VALUES ($1, $2, $3, $4)
RETURNING id, sessiontoken, refreshtoken, expires_at, created_at, updated_at, user_id
`

type CreateSessionParams struct {
	Sessiontoken string
	Refreshtoken string
	ExpiresAt    pgtype.Timestamp
	UserID       pgtype.UUID
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.Sessiontoken,
		arg.Refreshtoken,
		arg.ExpiresAt,
		arg.UserID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Sessiontoken,
		&i.Refreshtoken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :one
DELETE FROM "Session" WHERE sessiontoken = $1
RETURNING id, sessiontoken, refreshtoken, expires_at, created_at, updated_at, user_id
`

func (q *Queries) DeleteSession(ctx context.Context, sessiontoken string) (Session, error) {
	row := q.db.QueryRow(ctx, deleteSession, sessiontoken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Sessiontoken,
		&i.Refreshtoken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getSessionUser = `-- name: GetSessionUser :one
SELECT id, name, email, password, created_at, updated_at FROM "User" WHERE id = (SELECT user_id FROM "Session" WHERE sessionToken = $1)
`

func (q *Queries) GetSessionUser(ctx context.Context, sessiontoken string) (User, error) {
	row := q.db.QueryRow(ctx, getSessionUser, sessiontoken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at, updated_at FROM "User" WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, password, created_at, updated_at FROM "User" WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT  FROM user LIMIT 10
`

type ListUsersRow struct {
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
UPDATE "Session" SET sessionToken = $1, refreshToken = $2, expires_at = $3 WHERE sessionToken = $4
RETURNING id, sessiontoken, refreshtoken, expires_at, created_at, updated_at, user_id
`

type UpdateSessionParams struct {
	Sessiontoken   string
	Refreshtoken   string
	ExpiresAt      pgtype.Timestamp
	Sessiontoken_2 string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSession,
		arg.Sessiontoken,
		arg.Refreshtoken,
		arg.ExpiresAt,
		arg.Sessiontoken_2,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Sessiontoken,
		&i.Refreshtoken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
